# Install TensorFlow from Sources


### Clone the TensorFlow repository

Start the process of building TensorFlow by cloning a TensorFlow repository.
To clone the latest TensorFlow repository, issue the following command:

'''
git clone https://github.com/tensorflow/tensorflow
cd tensorflow
git checkout #Branch
'''

### Install Bazel

If bazel is not installed on your system, install it now by following ([these directions]https://bazel.build/versions/master/docs/install.html)

### Install TensorFlow Python dependencies

To install TensorFlow, you must install the following packages:
- 'numpy', which is a numerical processing package that TensorFlow requires.
- 'dev', which enables adding extensions to Python.
- 'pip', which enables you to install and manage certain Python packages.
- 'wheel', which enables you to manage Python compressed packages in the wheel (.whl) format.

To install these packages for Python 3.n, issue the following command:

'''
sudo apt-get install python3-numpy [python3-dev python3-pip python3-wheel) - no need if building Python from source]
'''

### Optional: install TensorFlow for GPU prerequisites

If you are building TensorFlow without GPU support, skip this section.
The following NVIDIA hardware must be installed on your system:
- GPU card with CUDA Compute Capability 3.0 or higher. See ([NVIDIA documentation]https://developer.nvidia.com/cuda-gpus) for a list of supported GPU cards.
The following NVIDIA software must be installed on your system:
- fA Toolkit'(>= 8.0). We recommend version 9.0. For details, see NVIDIA's documentation. Ensure that you append the relevant CUDA pathnames to the LD_LIBRARY_PATH environment variable as described in the NVIDIA documentation.
- 'U drivers supporting your version of the CUDA Toolkit.
- DNN SDK (>= 6.0). We recommend version 7.0. For details, see NVIDIA's documentation.
- CUPTI ships with the CUDA Toolkit, but you also need to append its path to the LD_LIBRARY_PATH environment variable:
